--------------------The Compare Function---------------------------------
- Explantation:
  - The purpose of the compare function is to define an alternative sort order.
    The compare function should return a negative, zero, or positive value, depending on the arguments:
      - function(a, b){return a - b};
    
  - When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.
    If the result is negative, a is sorted before b.
    If the result is positive, b is sorted before a.
    If the result is 0, no changes are done with the sort order of the two values.  
  - Example:
    - The compare function compares all the values in the array, two values at a time (a, b).
      When comparing 40 and 100, the sort() method calls the compare function(40, 100).
      The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.
      You can use this code snippet to experiment with numerically and alphabetically sorting:

------------------------The Fisher Yates Method--------------------------
- The above example, array.sort(), is not accurate. It will favor some numbers over the others.
  The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!
  In JavaScript the method can be translated to this:
    - code:
    const points = [40, 100, 1, 5, 25, 10];
    for (let i = points.length -1; i > 0; i--) {
      let j = Math.floor(Math.random() * (i+1));
      let k = points[i];
      points[i] = points[j];
      points[j] = k;
    }

-----------------------Find the Highest (or Lowest) Array Value---------
- There are no built-in functions for finding the max or min value in an array.
  However, after you have sorted an array, you can use the index to obtain the highest and lowest values.
  Sorting ascending:
    - const points = [40, 100, 1, 5, 25, 10];
      points.sort(function(a, b){return a - b});
      // now points[0] contains the lowest value
      // and points[points.length-1] contains the highest value

  - Sorting descending:
    - const points = [40, 100, 1, 5, 25, 10];
      points.sort(function(a, b){return b - a});
      // now points[0] contains the highest value
      // and points[points.length-1] contains the lowest value
  
  - NOTE:
    - Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.
    - Using Math.max() on an Array:
      code:
        - function myArrayMax(arr) {
         return Math.max.apply(null, arr);
        }
    - Using Math.min() on an Array:
      - Code:
        function myArrayMin(arr) {
          return Math.min.apply(null, arr);
        }
  - My Min / Max JavaScript Methods:
    - Example (Find Max):
    - code:
      function myArrayMax(arr) {
        let len = arr.length;
        let max = -Infinity;
        while (len--) {
        if (arr[len] > max) {
          max = arr[len];
          }
        }
        return max;
      }

------------------------Sorting Object Arrays--------------------------------------------
- JavaScript arrays often contain objects:
  - Even if objects have properties of different data types, the sort() method can be used to sort the array.
    The solution is to write a compare function to compare the property values:
      - cars.sort(function(a, b){return a.year - b.year});
  - Comparing string properties is a little more complex:
    Code:
      cars.sort(function(a, b){
        let x = a.type.toLowerCase();
        let y = b.type.toLowerCase();
        if (x < y) {return -1;}
        if (x > y) {return 1;}
        return 0;
      });

-----------------------Math.sin()-------------------------------------------------------
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
  - Angle in radians = Angle in degrees x PI / 180.

    Example
    Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

-----------------------Proper Random Function-----------------------------
This JavaScript function always returns a random number between min (included) and max (excluded):
  - function getRndInteger(min, max) {
      return Math.floor(Math.random() * (max - min) ) + min;
    }

This JavaScript function always returns a random number between min and max (both included):
  - function getRndInteger(min, max) {
      return Math.floor(Math.random() * (max - min + 1) ) + min;
    }

---------------------------Converting Decimal to Binary------------------------------------
function dec2bin(dec){
  return (dec >>> 0).toString(2);
}


--------------------------Converting Binary to Decimal-------------------------------------
function bin2dec(bin){
  return parseInt(bin, 2).toString(10);
}